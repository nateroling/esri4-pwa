"use strict";var it=Object.defineProperty,ot=Object.defineProperties,at=Object.getOwnPropertyDescriptors,ze=Object.getOwnPropertySymbols,rt=Object.prototype.hasOwnProperty,st=Object.prototype.propertyIsEnumerable,Ue=(pe,q,d)=>q in pe?it(pe,q,{enumerable:!0,configurable:!0,writable:!0,value:d}):pe[q]=d,Ne=(pe,q)=>{for(var d in q||(q={}))rt.call(q,d)&&Ue(pe,d,q[d]);if(ze)for(var d of ze(q))st.call(q,d)&&Ue(pe,d,q[d]);return pe},we=(pe,q)=>ot(pe,at(q));(self.webpackChunkesri4_pwa=self.webpackChunkesri4_pwa||[]).push([[4589],{67709:(pe,q,d)=>{function le(){return new Float32Array(4)}function F(p,E,L,R){const Q=new Float32Array(4);return Q[0]=p,Q[1]=E,Q[2]=L,Q[3]=R,Q}function r(){return le()}function k(){return F(1,1,1,1)}function te(){return F(1,0,0,0)}function C(){return F(0,1,0,0)}function y(){return F(0,0,1,0)}function X(){return F(0,0,0,1)}d.d(q,{f:()=>F});const V=r(),ne=k(),M=te(),h=C(),D=y(),O=X();Object.freeze({__proto__:null,create:le,clone:function b(p){const E=new Float32Array(4);return E[0]=p[0],E[1]=p[1],E[2]=p[2],E[3]=p[3],E},fromValues:F,createView:function Y(p,E){return new Float32Array(p,E,4)},zeros:r,ones:k,unitX:te,unitY:C,unitZ:y,unitW:X,ZEROS:V,ONES:ne,UNIT_X:M,UNIT_Y:h,UNIT_Z:D,UNIT_W:O})},77598:(pe,q,d)=>{d.d(q,{U:()=>qe});var le=d(18717),b=d(9769),F=d(50392),Y=d(62856),r=d(67969),k=d(38982),C=d(15765),y=d(39351);const X={nearest:{defines:[],samplingMode:r.cw.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:r.cw.LINEAR,mips:!1},bicubic:{defines:["bicubic"],samplingMode:r.cw.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:r.cw.LINEAR_MIPMAP_LINEAR,mips:!0}};var M=d(62208),h=d(67709),D=d(64288),O=d(11176),H=d(94299),L=d(29384),R=d(13382),Q=d(21286),me=d(49966),oe=d(39406),Te=d(5254),be=d(83994),Ce=d(49353);var g=d(1268);const K=1/65536;var ce=d(9545),ge=d(47132),Se=d(43289);var Fe=d(4619);class Re extends Y.Z{constructor(){super(...arguments),this._computeDesc=null}prepareState({context:e},f,c){const x=c&&-1!==c.indexOf("hittest");e.setBlendingEnabled(!x),e.setBlendFunctionSeparate(r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA,r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(r.wb.EQUAL,f.stencilRef,255)}draw(e,f,c){const x=this.getGeometryType();f.commit(e);const _=f.getGeometry(x);(0,M.Wi)(_)||(e.timeline.begin(this.name),e.attributeView.bindTextures(e.context),_.forEachCommand(v=>this.drawGeometry(e,f,v,c)))}_setSharedUniforms(e,f,c){const{displayLevel:x,pixelRatio:_,state:v,passOptions:T}=f;(0,M.pC)(T)&&"hittest"===T.type&&(e.setUniform2fv("u_hittestPos",T.position),e.setUniform1f("u_hittestDist",T.distance)),e.setUniform1f("u_pixelRatio",_),e.setUniformMatrix3fv("u_tileMat3",c.transforms.tileMat3),e.setUniformMatrix3fv("u_viewMat3",v.viewMat3),e.setUniformMatrix3fv("u_dvsMat3",c.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",v.displayViewMat3),e.setUniform1f("u_currentZoom",Math.round(x*y.MI)),e.setUniform1i("u_attributeTextureSize",f.attributeView.size),e.setUniform1i("u_attributeData0",y.iJ),e.setUniform1i("u_attributeData1",y.nM),e.setUniform1i("u_attributeData2",y.Ij),e.setUniform1i("u_attributeData3",y.f2)}_setSizeVVUniforms(e,f,c,x){if(e.vvSizeMinMaxValue&&f.setUniform4fv("u_vvSizeMinMaxValue",c.vvSizeMinMaxValue),e.vvSizeScaleStops&&f.setUniform1f("u_vvSizeScaleStopsValue",c.vvSizeScaleStopsValue),e.vvSizeFieldStops){const _=c.getSizeVVFieldStops(x.key.level);f.setUniform1fv("u_vvSizeFieldStopsValues",_.values),f.setUniform1fv("u_vvSizeFieldStopsSizes",_.sizes)}e.vvSizeUnitValue&&f.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",c.vvSizeUnitValueToPixelsRatio)}_setColorAndOpacityVVUniforms(e,f,c){e.vvColor&&(f.setUniform1fv("u_vvColorValues",c.vvColorValues),f.setUniform4fv("u_vvColors",c.vvColors)),e.vvOpacity&&(f.setUniform1fv("u_vvOpacityValues",c.vvOpacityValues),f.setUniform1fv("u_vvOpacities",c.vvOpacities))}_setRotationVVUniforms(e,f,c){e.vvRotation&&f.setUniform1f("u_vvRotationType","geographic"===c.vvMaterialParameters.vvRotationType?0:1)}_getTriangleDesc(e){if(!this._computeDesc){const f=e.strides,c=e.strides.geometry,x=new Map(e.attributes),_=e.bufferLayouts.geometry.map(z=>Ne({},z)),v=Math.max(...e.attributes.values()),T={geometry:_};T.geometry.push({count:2,name:"a_pos1",divisor:0,normalized:!1,offset:c,stride:c,type:r.g.SHORT}),T.geometry.push({count:2,name:"a_pos2",divisor:0,normalized:!1,offset:2*c,stride:c,type:r.g.SHORT}),x.set("a_pos1",v+1),x.set("a_pos2",v+2),this._computeDesc={bufferLayouts:T,attributes:x,strides:f}}return this._computeDesc}}var Me=d(18716),Ge=d(85775),Be=d(49266),We=d(55086);const qe={marker:class Je extends Re{dispose(){}getGeometryType(){return oe.LW.MARKER}drawGeometry(e,f,c,x){const{context:_,painter:v,rendererInfo:T,state:z,passOptions:A}=e,I=Me.mE.load(c.materialKey),{bufferLayouts:N,attributes:j}=(0,D.cM)(I.data,{geometry:[{location:0,name:"a_pos",count:2,type:r.g.SHORT},{location:1,name:"a_vertexOffset",count:2,type:r.g.SHORT},{location:2,name:"a_texCoords",count:2,type:r.g.UNSIGNED_SHORT},{location:3,name:"a_bitSetAndDistRatio",count:2,type:r.g.UNSIGNED_SHORT},{location:4,name:"a_id",count:4,type:r.g.UNSIGNED_BYTE},{location:5,name:"a_color",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:r.g.UNSIGNED_BYTE},{location:8,name:"a_zoomRange",count:2,type:r.g.UNSIGNED_SHORT}]}),P=v.materialManager.getMaterialProgram(e,I,"materials/icon",j,x);_.useProgram(P),I.textureBinding&&v.textureManager.bindTextures(_,P,I,!0);let B=r.MX.TRIANGLES;(0,M.pC)(A)&&"hittest"===A.type&&(B=r.MX.POINTS),this._setSharedUniforms(P,e,f),P.setUniformMatrix3fv("u_displayMat3",I.vvRotation?z.displayViewMat3:z.displayMat3),this._setSizeVVUniforms(I,P,T,f),this._setColorAndOpacityVVUniforms(I,P,T),this._setRotationVVUniforms(I,P,T);const U=c.target.getVAO(_,N,j),re=c.indexFrom*Uint32Array.BYTES_PER_ELEMENT;_.bindVAO(U),_.drawElements(B,c.indexCount,r.g.UNSIGNED_INT,re)}},line:class Xe extends Re{dispose(){}getGeometryType(){return oe.LW.LINE}drawGeometry(e,f,c,x){const{context:_,painter:v,rendererInfo:T,displayLevel:z,passOptions:A}=e,I=Me.a.load(c.materialKey);let N=(0,D.cM)(I.data,{geometry:[{location:0,name:"a_pos",count:2,type:r.g.SHORT},{location:1,name:"a_id",count:4,type:r.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:r.g.BYTE},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:r.g.UNSIGNED_SHORT},{location:5,name:"a_tlbr",count:4,type:r.g.UNSIGNED_SHORT},{location:6,name:"a_segmentDirection",count:4,type:r.g.BYTE},{location:7,name:"a_aux",count:2,type:r.g.UNSIGNED_SHORT},{location:8,name:"a_zoomRange",count:2,type:r.g.UNSIGNED_SHORT}]}),j=r.MX.TRIANGLES;(0,M.pC)(A)&&"hittest"===A.type&&(N=this._getTriangleDesc(N),j=r.MX.POINTS);const{attributes:P,bufferLayouts:B}=N,ee=v.materialManager.getMaterialProgram(e,I,"materials/line",P,x),U=1/e.pixelRatio;_.useProgram(ee),this._setSharedUniforms(ee,e,f),I.textureBinding&&v.textureManager.bindTextures(_,ee,I),ee.setUniform1f("u_zoomFactor",2**(z-f.key.level)/e.pixelRatio),ee.setUniform1f("u_blur",0+U),ee.setUniform1f("u_antialiasing",U),this._setSizeVVUniforms(I,ee,T,f),this._setColorAndOpacityVVUniforms(I,ee,T),_.setFaceCullingEnabled(!1);const $=(0,M.pC)(A)&&"hittest"===A.type,ae=c.target.getVAO(_,B,P,$);let G=c.indexCount,w=c.indexFrom*Uint32Array.BYTES_PER_ELEMENT;$&&(G/=3,w/=3),_.bindVAO(ae),_.drawElements(j,G,r.g.UNSIGNED_INT,w)}},fill:class Ze extends Re{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([y.kF,y.yP]),this._dotVAO=null,this._dotDesc={vsPath:"dot/dot",fsPath:"dot/dot",attributes:new Map([["a_pos",0]])}}dispose(){this._disposeTextures(),this._dotFBO=(0,M.O3)(this._dotFBO),this._dotVAO=(0,M.O3)(this._dotVAO)}getGeometryType(){return oe.LW.FILL}drawGeometry(e,f,c,x){const{context:_,painter:v,rendererInfo:T,requiredLevel:z,passOptions:A}=e,I=Me.dk.load(c.materialKey),N=v.materialManager;let j=r.MX.TRIANGLES,P=(_e=>{const e={geometry:[{location:0,name:"a_pos",count:2,type:r.g.SHORT},{location:1,name:"a_id",count:3,type:r.g.UNSIGNED_BYTE},{location:2,name:"a_bitset",count:1,type:r.g.UNSIGNED_BYTE}]};return _e.dotDensity?(e.geometry.push({location:3,name:"a_inverseArea",count:1,type:r.g.FLOAT}),(0,D.cM)(_e.data,e)):(e.geometry.push({location:3,name:"a_color",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0}),_e.simple||e.geometry.push({location:4,name:"a_aux1",count:4,type:r.g.UNSIGNED_SHORT}),e.geometry.push({location:5,name:"a_aux2",count:4,type:r.g.UNSIGNED_BYTE},{location:6,name:"a_aux3",count:4,type:r.g.UNSIGNED_BYTE}),_e.simple||e.geometry.push({location:7,name:"a_zoomRange",count:2,type:r.g.UNSIGNED_SHORT}),(0,D.cM)(_e.data,e))})(I);(0,M.pC)(A)&&"hittest"===A.type&&(P=this._getTriangleDesc(P),j=r.MX.POINTS);const{attributes:B,bufferLayouts:ee}=P,U=N.getMaterialProgram(e,I,"materials/fill",B,x);_.useProgram(U),this._setSharedUniforms(U,e,f),U.setUniform2f("u_tileOffset",512*f.key.col,512*f.key.row),I.textureBinding&&(v.textureManager.bindTextures(_,U,I),U.setUniform1f("u_zoomFactor",1/2**(z-f.key.level)/e.pixelRatio));const re=1/e.pixelRatio;U.setUniform1f("u_blur",re),U.setUniform1f("u_antialiasing",re),this._setSizeVVUniforms(I,U,T,f),this._setColorAndOpacityVVUniforms(I,U,T);const ue=(0,M.pC)(A)&&"hittest"===A.type,$=c.target.getVAO(_,ee,B,ue);let ae=c.indexCount,G=c.indexFrom*Uint32Array.BYTES_PER_ELEMENT;if(ue&&(ae/=3,G/=3),_.bindVAO($),!I.dotDensity||ue)_.drawElements(j,ae,r.g.UNSIGNED_INT,G);else{const w=this._drawDotLocations(e,f,U,ae,G);this._drawDotDensity(e,f,w)}}_drawDotDensity(e,f,c){const{context:x,painter:_,rendererInfo:v}=e,T=_.materialManager.getProgram(e,this._dotDesc),z=this._createDotDensityMesh(x,this._dotDesc.attributes,{geometry:[{name:"a_pos",count:2,type:r.g.SHORT,divisor:0,normalized:!1,offset:0,stride:4}]});x.setStencilTestEnabled(!0),x.useProgram(T),T.setUniform1f("u_tileZoomFactor",1),T.setUniform1i("u_texture",this._dotSamplers[0]),T.setUniform1f("u_dotSize",v.ddDotSize),T.setUniform1f("u_pixelRatio",window.devicePixelRatio),this._setSharedUniforms(T,e,f),x.bindTexture(c,this._dotSamplers[0]),x.bindVAO(z),x.drawArrays(r.MX.POINTS,0,262144)}_drawDotLocations(e,f,c,x,_){const{context:v,rendererInfo:T,requiredLevel:z}=e,A=v.getViewport();v.setViewport(0,0,512,512);const I=v.getBoundFramebufferObject(),N=this._createFBO(v);v.bindFramebuffer(N),v.setClearColor(0,0,0,0),v.clear(v.gl.COLOR_BUFFER_BIT|v.gl.STENCIL_BUFFER_BIT),v.setStencilTestEnabled(!1);const j=1/2**(z-f.key.level),P=y.I_,B=P*window.devicePixelRatio*P*window.devicePixelRatio,ee=1/j*(1/j),U=T.ddDotScale?e.state.scale/T.ddDotScale:1;return c.setUniform1f("u_tileZoomFactor",j),c.setUniform1f("u_tileDotsOverArea",B/(y.I_*window.devicePixelRatio*y.I_*window.devicePixelRatio)),c.setUniformMatrix4fv("u_dotColors",T.ddColors),c.setUniform4fv("u_isActive",T.ddActiveDots),c.setUniform4fv("u_dotBackgroundColor",T.ddBackgroundColor),c.setUniform1f("u_dotValue",Math.max(1,T.ddDotValue*U*ee)),this._bindDotDensityTextures(v,c,T,P),v.drawElements(r.MX.TRIANGLES,x,r.g.UNSIGNED_INT,_),v.setViewport(A.x,A.y,A.width,A.height),v.bindFramebuffer(I),N.colorTexture}_createFBO(e){if((0,M.Wi)(this._dotFBO)){const x={target:r.No.TEXTURE_2D,pixelFormat:r.VI.RGBA,dataType:r.Br.UNSIGNED_BYTE,samplingMode:r.cw.NEAREST,wrapMode:r.e8.CLAMP_TO_EDGE,width:512,height:512},_={colorTarget:r.Lm.TEXTURE,depthStencilTarget:r.OU.DEPTH_STENCIL_RENDER_BUFFER},v=new Be.r(e,{width:512,height:512,internalFormat:r.Tg.DEPTH_STENCIL});this._dotFBO=new Ge.X(e,_,x,v)}return this._dotFBO}_disposeTextures(){if(this._dotTextures){for(let e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}}_bindDotDensityTextures(e,f,c,x){const _=this._createDotDensityTextures(e,x,c.ddSeed);f.setUniform1iv("u_dotTextures",this._dotSamplers);for(let v=0;v<_.length;v++)e.bindTexture(_[v],this._dotSamplers[v])}_createDotDensityMesh(e,f,c){if((0,M.Wi)(this._dotVAO)){const _=new Int16Array(524288);for(let T=0;T<512;T++)for(let z=0;z<512;z++)_[2*(z+512*T)]=z,_[2*(z+512*T)+1]=T;const v=be.f.createVertex(e,r.l1.STATIC_DRAW,_);this._dotVAO=new Ce.U(e,f,c,{geometry:v},null)}return this._dotVAO}_createDotDensityTextures(e,f,c){if(this._dotTextureSize===f&&this._seed===c||(this._disposeTextures(),this._dotTextureSize=f,this._seed=c),null===this._dotTextures){const x=new Fe.Z(c);this._dotTextures=[this._allocDotDensityTexture(e,f,x),this._allocDotDensityTexture(e,f,x)]}return this._dotTextures}_allocDotDensityTexture(e,f,c){const x=new Float32Array(f*f*4);for(let _=0;_<x.length;_++)x[_]=c.getFloat();return new We.x(e,{wrapMode:r.e8.REPEAT,pixelFormat:r.VI.RGBA,dataType:r.Br.FLOAT,samplingMode:r.cw.NEAREST,width:f,height:f},x)}},text:class $e extends Re{dispose(){}getGeometryType(){return oe.LW.TEXT}drawGeometry(e,f,c,x){const{context:_,painter:v,rendererInfo:T,state:z,passOptions:A}=e,I=Me.qr.load(c.materialKey),{bufferLayouts:N,attributes:j}=(0,D.cM)(I.data,{geometry:[{location:0,name:"a_pos",count:2,type:r.g.SHORT},{location:1,name:"a_id",count:4,type:r.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:r.g.UNSIGNED_BYTE},{location:5,name:"a_aux",count:4,type:r.g.BYTE},{location:6,name:"a_zoomRange",count:2,type:r.g.UNSIGNED_SHORT},{location:7,name:"a_vertexOffset",count:2,type:r.g.SHORT},{location:8,name:"a_texCoords",count:2,type:r.g.UNSIGNED_SHORT}]}),P=v.materialManager.getMaterialProgram(e,I,"materials/text",j,x);_.useProgram(P);let B=r.MX.TRIANGLES;(0,M.pC)(A)&&"hittest"===A.type&&(B=r.MX.POINTS),this._setSharedUniforms(P,e,f),v.textureManager.bindTextures(_,P,I),P.setUniformMatrix3fv("u_displayMat3",z.displayMat3),P.setUniformMatrix3fv("u_displayViewMat3",z.displayViewMat3),this._setSizeVVUniforms(I,P,T,f),this._setColorAndOpacityVVUniforms(I,P,T),this._setRotationVVUniforms(I,P,T),P.setUniform1f("u_isHalo",1);const ee=c.target.getVAO(_,N,j),U=c.indexFrom*Uint32Array.BYTES_PER_ELEMENT;_.bindVAO(ee),_.drawElements(r.MX.TRIANGLES,c.indexCount,r.g.UNSIGNED_INT,U),P.setUniform1f("u_isHalo",0),_.drawElements(B,c.indexCount,r.g.UNSIGNED_INT,U)}},label:class Ye extends Re{dispose(){}getGeometryType(){return oe.LW.LABEL}drawGeometry(e,f,c,x){const{context:_,painter:v,state:T,rendererInfo:z}=e,A=Me.Gq.load(c.materialKey),I=A.mapAligned?1:0;if(!I&&Math.abs(f.key.level-Math.round(100*e.displayLevel)/100)>=1)return;const{bufferLayouts:N,attributes:j}=(0,D.cM)(A.data,{geometry:[{location:0,name:"a_pos",count:2,type:r.g.SHORT},{location:1,name:"a_id",count:4,type:r.g.UNSIGNED_BYTE},{location:2,name:"a_color",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0},{location:3,name:"a_haloColor",count:4,type:r.g.UNSIGNED_BYTE,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:r.g.UNSIGNED_BYTE},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:r.g.UNSIGNED_BYTE},{location:6,name:"a_glyphData",count:4,type:r.g.UNSIGNED_BYTE},{location:7,name:"a_vertexOffset",count:2,type:r.g.SHORT},{location:8,name:"a_texCoords",count:2,type:r.g.UNSIGNED_SHORT}]}),P=v.materialManager.getMaterialProgram(e,A,"materials/label",j,x);e.context.setStencilFunction(r.wb.EQUAL,0,255),_.useProgram(P),this._setSharedUniforms(P,e,f),v.textureManager.bindTextures(_,P,A);const B=1===I?T.displayViewMat3:T.displayMat3;this._setSizeVVUniforms(A,P,z,f),P.setUniform1f("u_mapRotation",Math.floor(T.rotation/360*254)),P.setUniform1f("u_mapAligned",I),P.setUniformMatrix3fv("u_displayMat3",B),P.setUniform1f("u_opacity",1),P.setUniform2fv("u_screenSize",e.state.size),P.setUniform1f("u_isHalo",1);const ee=c.target.getVAO(_,N,j),U=c.indexFrom*Uint32Array.BYTES_PER_ELEMENT;_.bindVAO(ee),_.drawElements(r.MX.TRIANGLES,c.indexCount,r.g.UNSIGNED_INT,U),P.setUniform1f("u_isHalo",0),_.drawElements(r.MX.TRIANGLES,c.indexCount,r.g.UNSIGNED_INT,U),_.setStencilTestEnabled(!0),_.setBlendingEnabled(!0)}},clip:class E extends Y.Z{constructor(){super(...arguments),this._color=(0,h.f)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(r.xS.KEEP,r.xS.KEEP,r.xS.REPLACE),e.setStencilWriteMask(255),e.setStencilFunction(r.wb.ALWAYS,0,255)}draw(e,f){const{context:c,state:x}=e,_=(0,D.cM)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:r.g.SHORT}]}),v=f.getVAO(c,x,_.attributes,_.bufferLayouts);(0,M.Wi)(v.indexBuffer)||(this._program||(this._program=(0,H.H)(c,O.O)),c.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",x.displayMat3),c.bindVAO(v),c.drawElements(r.MX.TRIANGLES,v.indexBuffer.size,r.g.UNSIGNED_INT,0),c.bindVAO())}},stencil:R.Z,bitmap:class ne extends Y.Z{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_position",0],["a_texcoord",1]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},f){e.setBlendingEnabled(!0),"additive"===f.blendFunction?e.setBlendFunctionSeparate(r.zi.ONE,r.zi.ONE,r.zi.ONE,r.zi.ONE):e.setBlendFunctionSeparate(r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA,r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(r.wb.EQUAL,f.stencilRef,255)}draw(e,f){const{context:c,renderingOptions:x,painter:_}=e;if(!f.source)return;e.timeline.begin(this.name),this._quad||(this._quad=new F.Z(c,[0,0,1,0,0,1,1,1]));const v=((_e,e,f)=>{if("dynamic"===f.samplingMode){const{state:c}=_e,x=e.resolution/e.pixelRatio/c.resolution,_=Math.round(_e.pixelRatio)!==_e.pixelRatio,v=x>1.05||x<.95;return c.rotation||v||_||e.isSourceScaled||e.rotation?X.bilinear:X.nearest}return X[f.samplingMode]})(e,f,x),T=_.materialManager.getProgram(e,this._desc,v.defines),{coordScale:z,computedOpacity:A,transforms:I}=f;f.setSamplingProfile(v),f.bind(e.context,y.Ic),c.useProgram(T),T.setUniformMatrix3fv("u_dvsMat3",I.dvs),T.setUniform1i("u_texture",y.Ic),T.setUniform2fv("u_coordScale",z),T.setUniform1f("u_opacity",A),this._quad.draw(),e.timeline.end(this.name)}},raster:class te extends Y.Z{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e},f){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA,r.zi.ONE,r.zi.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(r.wb.EQUAL,f.stencilRef,255)}draw(e,f){var c;if(!(0,b.qE)(f)||f.suspended)return;e.timeline.begin(this.name);const x=!(null!=(c=e.context.capabilities.textureFloat)&&c.textureFloatLinear);f.updateTexture(e);const _=this._getShaderVariations(f,x),v=e.painter.materialManager.getProgram(e,this._desc[f.symbolizerParameters.type],_);this._drawWithProgram(e.context,v,f),e.timeline.end(this.name)}_drawWithProgram(e,f,c,x=1,_=[0,0],v=!1){this._quad||(this._quad=new F.Z(e,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:T,transformGrid:z,width:A,height:I,opacity:N}=c,j=T.type;e.useProgram(f);const P=this._getShaderVariations(c),B=this._getUniformInfos(j,e,f,P),{names:ee,textures:U}=c.getTextures();(0,k.RA)(e,f,ee,U);const re=(0,k.zS)(x,_),ue=(0,k.Tc)(z,[A,I],[c.source.width,c.source.height],N,v);if((0,k.N9)(f,B,Ne(Ne({u_coordScale:c.coordScale,u_dvsMat3:c.transforms.dvs},re),ue)),T.colormap){const{colormap:$,colormapOffset:ae}=T,G=(0,k.Ue)($,ae);(0,k.N9)(f,B,G)}if("stretch"===T.type){const $=(0,k.xW)(T);(0,k.N9)(f,B,$)}else if("hillshade"===T.type){const $=(0,k.Fm)(T);(0,k.N9)(f,B,$)}this._quad.draw()}_getUniformInfos(e,f,c,x){const _=x.length>0?e+"-"+x.join("-"):e;if(this._rendererUniformInfos.has(_))return this._rendererUniformInfos.get(_);const v=(0,k.v)(f,c);return this._rendererUniformInfos.set(_,v),v}_getShaderVariations(e,f=!1){const c=[],{interpolation:x}=e,{type:_,colormap:v}=e.symbolizerParameters;return"cubic"===x?c.push("bicubic"):"bilinear"===x&&"stretch"===_&&null!=v?(c.push("bilinear"),c.push("nnedge")):f&&"bilinear"===x&&c.push("bilinear"),e.isRendereredSource?c.push("noop"):v&&c.push("applyColormap"),e.transformGrid&&(c.push("applyProjection"),1===e.transformGrid.spacing[0]&&c.push("lookupProjection")),c}},rasterVF:C.Z,flow:le.Z,tileInfo:L.Z,vtlBackground:class ve extends Y.Z{constructor(){super(...arguments),this._color=(0,h.f)(1,0,0,1),this._patternMatrix=(0,me.c)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,f){const{context:c,painter:x,styleLayerUID:_}=e;this._loadWGLResources(e);const v=e.displayLevel,T=e.styleLayer,z=T.backgroundMaterial,A=x.vectorTilesMaterialManager,I=T.getPaintValue("background-color",v),N=T.getPaintValue("background-opacity",v),j=T.getPaintValue("background-pattern",v),P=void 0!==j,B=I[3]*N,ee=1|window.devicePixelRatio,U=e.spriteMosaic;let re,ue;const $=ee>y.a?2:1,ae=e.drawPhase===oe.jx.HITTEST,G=this._programOptions;G.id=ae,G.pattern=P;const w=A.getMaterialProgram(c,z,G);if(c.bindVAO(this._vao),c.useProgram(w),P){const W=U.getMosaicItemPosition(j,!0);if((0,M.pC)(W)){const{tl:se,br:J,page:de}=W;re=J[0]-se[0],ue=J[1]-se[1];const fe=U.getPageSize(de);(0,M.pC)(fe)&&(U.bind(c,r.cw.LINEAR,de,y.V4),w.setUniform4f("u_tlbr",se[0],se[1],J[0],J[1]),w.setUniform2fv("u_mosaicSize",fe),w.setUniform1i("u_texture",y.V4))}w.setUniform1f("u_opacity",N)}else this._color[0]=B*I[0],this._color[1]=B*I[1],this._color[2]=B*I[2],this._color[3]=B,w.setUniform4fv("u_color",this._color);if(w.setUniform1f("u_depth",T.z||0),ae){const W=(0,Te.Au)(_+1);w.setUniform4fv("u_id",W)}for(const W of f){if(w.setUniform1f("u_coord_range",W.rangeX),w.setUniformMatrix3fv("u_dvsMat3",W.transforms.dvs),P){const se=Math.max(2**(Math.round(v)-W.key.level),1),J=$*W.width*se,de=J/(0,Q.fp)(re),fe=J/(0,Q.fp)(ue);this._patternMatrix[0]=de,this._patternMatrix[4]=fe,w.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}c.setStencilFunction(r.wb.EQUAL,W.stencilRef,255),c.drawArrays(r.MX.TRIANGLE_STRIP,0,4)}}_loadWGLResources(e){if(this._vao)return;const{context:f,styleLayer:c}=e,x=c.backgroundMaterial,_=new Int8Array([0,0,1,0,0,1,1,1]),v=be.f.createVertex(f,r.l1.STATIC_DRAW,_),T=new Ce.U(f,x.getAttributeLocations(),x.getLayoutInfo(),{geometry:v});this._vao=T}},vtlFill:class Z extends Y.Z{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(e,f){const{displayLevel:c,drawPhase:x,renderPass:_,spriteMosaic:v,styleLayerUID:T}=e;let z=!1;for(const G of f)if(G.layerData.has(T)){const w=G.layerData.get(T);if(w.fillIndexCount>0||w.outlineIndexCount>0){z=!0;break}}if(!z)return;const A=e.styleLayer,I=A.getPaintProperty("fill-pattern"),N=void 0!==I,j=N&&I.isDataDriven;let P;if(N&&!j){const G=I.getValue(c);P=v.getMosaicItemPosition(G,!0)}const B=!N&&A.getPaintValue("fill-antialias",c);let re,ee=!0,U=1;if(!N){const G=A.getPaintProperty("fill-color"),w=A.getPaintProperty("fill-opacity");if(!(null!=G&&G.isDataDriven||null!=w&&w.isDataDriven)){const W=A.getPaintValue("fill-color",c);U=A.getPaintValue("fill-opacity",c)*W[3],U>=1&&(ee=!1)}}if(ee&&"opaque"===_)return;x===oe.jx.HITTEST&&(re=(0,Te.Au)(T+1));const ue=A.getPaintValue("fill-translate",c),$=A.getPaintValue("fill-translate-anchor",c);(ee||"translucent"!==_)&&this._drawFill(e,T,A,f,ue,$,N,P,j,re),B&&"opaque"!==_&&!(!A.hasDataDrivenOutlineColor&&A.outlineUsesFillColor&&U<1)&&this._drawOutline(e,T,A,f,ue,$,re)}_drawFill(e,f,c,x,_,v,T,z,A,I){if(T&&!A&&(0,M.Wi)(z))return;const{context:N,displayLevel:j,state:P,drawPhase:B,painter:ee,pixelRatio:U,spriteMosaic:re}=e,ue=c.fillMaterial,$=ee.vectorTilesMaterialManager,ae=U>y.a?2:1,G=B===oe.jx.HITTEST,w=this._fillProgramOptions;w.id=G,w.pattern=T;const W=$.getMaterialProgram(N,ue,w);if(N.useProgram(W),(0,M.pC)(z)){const{page:J}=z,de=re.getPageSize(J);(0,M.pC)(de)&&(re.bind(N,r.cw.LINEAR,J,y.V4),W.setUniform2fv("u_mosaicSize",de),W.setUniform1i("u_texture",y.V4))}W.setUniformMatrix3fv("u_displayMat3",v===g.fD.VIEWPORT?P.displayMat3:P.displayViewMat3),W.setUniform2fv("u_fillTranslation",_),W.setUniform1f("u_depth",c.z+K),G&&W.setUniform4fv("u_id",I);let se=-1;for(const J of x){if(!J.layerData.has(f))continue;J.key.level!==se&&(se=J.key.level,ue.setDataUniforms(W,j,c,se,re));const de=J.layerData.get(f);if(!de.fillIndexCount)continue;de.prepareForRendering(N);const fe=de.fillVertexArrayObject;if(!(0,M.Wi)(fe)){if(N.bindVAO(fe),W.setUniformMatrix3fv("u_dvsMat3",J.transforms.dvs),N.setStencilFunction(r.wb.EQUAL,J.stencilRef,255),T){const ye=Math.max(2**(Math.round(j)-J.key.level),1);W.setUniform1f("u_patternFactor",J.rangeX/(ae*J.width*ye))}if(A){const ye=de.patternMap;if(!ye)continue;for(const[he,De]of ye){const Pe=re.getPageSize(he);(0,M.pC)(Pe)&&(re.bind(N,r.cw.LINEAR,he,y.V4),W.setUniform2fv("u_mosaicSize",Pe),W.setUniform1i("u_texture",y.V4),N.drawElements(r.MX.TRIANGLES,De[1],r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*De[0]))}}else N.drawElements(r.MX.TRIANGLES,de.fillIndexCount,r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*de.fillIndexStart);J.triangleCount+=de.fillIndexCount/3}}}_drawOutline(e,f,c,x,_,v,T){const{context:z,displayLevel:A,state:I,drawPhase:N,painter:j,pixelRatio:P,spriteMosaic:B}=e,ee=c.outlineMaterial,U=j.vectorTilesMaterialManager,re=.75/P,ue=N===oe.jx.HITTEST,$=this._outlineProgramOptions;$.id=ue;const ae=U.getMaterialProgram(z,ee,$);z.useProgram(ae),ae.setUniformMatrix3fv("u_displayMat3",v===g.fD.VIEWPORT?I.displayMat3:I.displayViewMat3),ae.setUniform2fv("u_fillTranslation",_),ae.setUniform1f("u_depth",c.z+K),ae.setUniform1f("u_outline_width",re),ue&&ae.setUniform4fv("u_id",T);let G=-1;for(const w of x){if(!w.layerData.has(f))continue;w.key.level!==G&&(G=w.key.level,ee.setDataUniforms(ae,A,c,G,B));const W=w.layerData.get(f);if(W.prepareForRendering(z),!W.outlineIndexCount)continue;const se=W.outlineVertexArrayObject;(0,M.Wi)(se)||(z.bindVAO(se),ae.setUniformMatrix3fv("u_dvsMat3",w.transforms.dvs),z.setStencilFunction(r.wb.EQUAL,w.stencilRef,255),z.drawElements(r.MX.TRIANGLES,W.outlineIndexCount,r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*W.outlineIndexStart),w.triangleCount+=W.outlineIndexCount/3)}}},vtlLine:class ie extends Y.Z{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(e,f){const{context:c,displayLevel:x,state:_,drawPhase:v,painter:T,pixelRatio:z,spriteMosaic:A,styleLayerUID:I}=e;if(!f.some(fe=>{var ye,he;return null!=(ye=null==(he=fe.layerData.get(I))?void 0:he.lineIndexCount)&&ye}))return;const N=e.styleLayer,j=N.lineMaterial,P=T.vectorTilesMaterialManager,B=N.getPaintValue("line-translate",x),ee=N.getPaintValue("line-translate-anchor",x),U=N.getPaintProperty("line-pattern"),re=void 0!==U,ue=re&&U.isDataDriven;let $,ae;if(re&&!ue){const fe=U.getValue(x);$=A.getMosaicItemPosition(fe)}let G=!1;if(!re){const fe=N.getPaintProperty("line-dasharray");if(ae=void 0!==fe,G=ae&&fe.isDataDriven,ae&&!G){const ye=fe.getValue(x),he=N.getDashKey(ye,N.getLayoutValue("line-cap",x));$=A.getMosaicItemPosition(he)}}const w=1/z,W=v===oe.jx.HITTEST,se=this._programOptions;se.id=W,se.pattern=re,se.sdf=ae;const J=P.getMaterialProgram(c,j,se);if(c.useProgram(J),J.setUniformMatrix3fv("u_displayViewMat3",_.displayViewMat3),J.setUniformMatrix3fv("u_displayMat3",ee===g.fD.VIEWPORT?_.displayMat3:_.displayViewMat3),J.setUniform2fv("u_lineTranslation",B),J.setUniform1f("u_depth",N.z),J.setUniform1f("u_antialiasing",w),W){const fe=(0,Te.Au)(I+1);J.setUniform4fv("u_id",fe)}if($&&(0,M.pC)($)){const{page:fe}=$,ye=A.getPageSize(fe);(0,M.pC)(ye)&&(A.bind(c,r.cw.LINEAR,fe,y.V4),J.setUniform2fv("u_mosaicSize",ye),J.setUniform1i("u_texture",y.V4))}let de=-1;for(const fe of f){if(!fe.layerData.has(I))continue;fe.key.level!==de&&(de=fe.key.level,j.setDataUniforms(J,x,N,de,A)),J.setUniform1f("u_zoomFactor",2**(x-de)/z);const he=fe.layerData.get(I);if(!he.lineIndexCount)continue;he.prepareForRendering(c);const De=he.lineVertexArrayObject;if(!(0,M.Wi)(De)){if(c.bindVAO(De),J.setUniformMatrix3fv("u_dvsMat3",fe.transforms.dvs),c.setStencilFunction(r.wb.EQUAL,fe.stencilRef,255),ue||G){const Pe=he.patternMap;if(!Pe)continue;for(const[Le,xe]of Pe){const Ae=A.getPageSize(Le);(0,M.pC)(Ae)&&(A.bind(c,r.cw.LINEAR,Le,y.V4),J.setUniform2fv("u_mosaicSize",Ae),J.setUniform1i("u_texture",y.V4),c.drawElements(r.MX.TRIANGLES,xe[1],r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*xe[0]))}}else c.drawElements(r.MX.TRIANGLES,he.lineIndexCount,r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*he.lineIndexStart);fe.triangleCount+=he.lineIndexCount/3}}}},vtlCircle:class S extends Y.Z{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(e,f){const{context:c,displayLevel:x,requiredLevel:_,state:v,drawPhase:T,painter:z,spriteMosaic:A,styleLayerUID:I}=e;if(!f.some(G=>{var w,W;return null!=(w=null==(W=G.layerData.get(I))?void 0:W.circleIndexCount)&&w}))return;const N=e.styleLayer,j=N.circleMaterial,P=z.vectorTilesMaterialManager,ee=N.getPaintValue("circle-translate",x),U=N.getPaintValue("circle-translate-anchor",x),re=T===oe.jx.HITTEST,ue=this._programOptions;ue.id=re;const $=P.getMaterialProgram(c,j,ue);c.useProgram($),$.setUniformMatrix3fv("u_displayMat3",U===g.fD.VIEWPORT?v.displayMat3:v.displayViewMat3),$.setUniform2fv("u_circleTranslation",ee),$.setUniform1f("u_depth",N.z),$.setUniform1f("u_antialiasingWidth",1.2);let ae=-1;if(re){const G=(0,Te.Au)(I+1);$.setUniform4fv("u_id",G)}for(const G of f){if(!G.layerData.has(I))continue;G.key.level!==ae&&(ae=G.key.level,j.setDataUniforms($,x,N,ae,A));const w=G.layerData.get(I);if(!w.circleIndexCount)continue;w.prepareForRendering(c);const W=w.circleVertexArrayObject;(0,M.Wi)(W)||(c.bindVAO(W),$.setUniformMatrix3fv("u_dvsMat3",G.transforms.dvs),_!==G.key.level?c.setStencilFunction(r.wb.EQUAL,G.stencilRef,255):c.setStencilFunction(r.wb.GREATER,255,255),c.drawElements(r.MX.TRIANGLES,w.circleIndexCount,r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*w.circleIndexStart),G.triangleCount+=w.circleIndexCount/3)}}},vtlSymbol:class Oe extends Y.Z{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=(0,ce.c)()}dispose(){}drawMany(e,f){const{drawPhase:c,styleLayerUID:x}=e,_=e.styleLayer;let v;c===oe.jx.HITTEST&&(v=(0,Te.Au)(x+1)),this._drawIcons(e,_,f,v),this._drawText(e,_,f,v)}_drawIcons(e,f,c,x){const{context:_,displayLevel:v,drawPhase:T,painter:z,spriteMosaic:A,state:I,styleLayerUID:N}=e,j=f.iconMaterial,P=z.vectorTilesMaterialManager;let B,ee=!1;for(const de of c)if(de.layerData.has(N)&&(B=de.layerData.get(N),B.iconPerPageElementsMap.size>0)){ee=!0;break}if(!ee)return;const U=f.getPaintValue("icon-translate",v),re=f.getPaintValue("icon-translate-anchor",v);let ue=f.getLayoutValue("icon-rotation-alignment",v);ue===g.aF.AUTO&&(ue=f.getLayoutValue("symbol-placement",v)===g.R.POINT?g.aF.VIEWPORT:g.aF.MAP);const $=ue===g.aF.MAP,ae=f.getLayoutValue("icon-keep-upright",v)&&$,G=B.isIconSDF,w=T===oe.jx.HITTEST,W=this._iconProgramOptions;W.id=w,W.sdf=G;const se=P.getMaterialProgram(_,j,W);_.useProgram(se),se.setUniformMatrix3fv("u_displayViewMat3",ue===g.aF.MAP?I.displayViewMat3:I.displayMat3),se.setUniformMatrix3fv("u_displayMat3",re===g.fD.VIEWPORT?I.displayMat3:I.displayViewMat3),se.setUniform2fv("u_iconTranslation",U),se.setUniform1f("u_depth",f.z),se.setUniform1f("u_mapRotation",(0,Se.s5)(I.rotation)),se.setUniform1f("u_keepUpright",ae?1:0),se.setUniform1f("u_level",10*v),se.setUniform1i("u_texture",y.V4),se.setUniform1f("u_fadeDuration",ge.nN/1e3),w&&se.setUniform4fv("u_id",x);let J=-1;for(const de of c){if(!de.layerData.has(N)||(de.key.level!==J&&(J=de.key.level,j.setDataUniforms(se,v,f,J,A)),B=de.layerData.get(N),0===B.iconPerPageElementsMap.size))continue;B.prepareForRendering(_),B.updateOpacityInfo();const fe=B.iconVertexArrayObject;if(!(0,M.Wi)(fe)){_.bindVAO(fe),se.setUniformMatrix3fv("u_dvsMat3",de.transforms.dvs),se.setUniform1f("u_time",(performance.now()-B.lastOpacityUpdate)/1e3);for(const[ye,he]of B.iconPerPageElementsMap)this._renderIconRange(e,se,he,ye,de)}}}_renderIconRange(e,f,c,x,_){const{context:v,spriteMosaic:T}=e;this._spritesTextureSize[0]=T.getWidth(x)/4,this._spritesTextureSize[1]=T.getHeight(x)/4,f.setUniform2fv("u_mosaicSize",this._spritesTextureSize),T.bind(v,r.cw.LINEAR,x,y.V4),v.setStencilTestEnabled(!0),v.setStencilFunction(r.wb.GREATER,255,255),v.setStencilWriteMask(0),v.drawElements(r.MX.TRIANGLES,c[1],r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*c[0]),_.triangleCount+=c[1]/3}_drawText(e,f,c,x){const{context:_,displayLevel:v,drawPhase:T,glyphMosaic:z,painter:A,pixelRatio:I,spriteMosaic:N,state:j,styleLayerUID:P}=e,B=f.textMaterial,ee=A.vectorTilesMaterialManager;let U,re=!1;for(const Ie of c)if(Ie.layerData.has(P)&&(U=Ie.layerData.get(P),U.glyphPerPageElementsMap.size>0)){re=!0;break}if(!re)return;const ue=f.getPaintProperty("text-opacity");if(ue&&!ue.isDataDriven&&0===ue.getValue(v))return;const $=f.getPaintProperty("text-color"),ae=!$||$.isDataDriven||$.getValue(v)[3]>0,G=f.getPaintProperty("text-halo-width"),w=f.getPaintProperty("text-halo-color"),W=(!G||G.isDataDriven||G.getValue(v)>0)&&(!w||w.isDataDriven||w.getValue(v)[3]>0);if(!ae&&!W)return;let J=f.getLayoutValue("text-rotation-alignment",v);J===g.aF.AUTO&&(J=f.getLayoutValue("symbol-placement",v)===g.R.POINT?g.aF.VIEWPORT:g.aF.MAP);const de=J===g.aF.MAP,fe=f.getLayoutValue("text-keep-upright",v)&&de,ye=T===oe.jx.HITTEST,he=.8*3/I;this._glyphTextureSize||(this._glyphTextureSize=(0,ce.f)(z.width/4,z.height/4));const De=f.getPaintValue("text-translate",v),Pe=f.getPaintValue("text-translate-anchor",v),Le=this._sdfProgramOptions;Le.id=ye;const xe=ee.getMaterialProgram(_,B,Le);_.useProgram(xe),xe.setUniformMatrix3fv("u_displayViewMat3",J===g.aF.MAP?j.displayViewMat3:j.displayMat3),xe.setUniformMatrix3fv("u_displayMat3",Pe===g.fD.VIEWPORT?j.displayMat3:j.displayViewMat3),xe.setUniform2fv("u_textTranslation",De),xe.setUniform1f("u_depth",f.z+152587890625e-16),xe.setUniform2fv("u_mosaicSize",this._glyphTextureSize),xe.setUniform1f("u_mapRotation",(0,Se.s5)(j.rotation)),xe.setUniform1f("u_keepUpright",fe?1:0),xe.setUniform1f("u_level",10*v),xe.setUniform1i("u_texture",y.CU),xe.setUniform1f("u_antialiasingWidth",he),xe.setUniform1f("u_fadeDuration",ge.nN/1e3),ye&&xe.setUniform4fv("u_id",x);let Ae=-1;for(const Ie of c){if(!Ie.layerData.has(P)||(Ie.key.level!==Ae&&(Ae=Ie.key.level,B.setDataUniforms(xe,v,f,Ae,N)),U=Ie.layerData.get(P),0===U.glyphPerPageElementsMap.size))continue;U.prepareForRendering(_),U.updateOpacityInfo();const Ve=U.textVertexArrayObject;if((0,M.Wi)(Ve))continue;_.bindVAO(Ve),xe.setUniformMatrix3fv("u_dvsMat3",Ie.transforms.dvs),_.setStencilTestEnabled(!0),_.setStencilFunction(r.wb.GREATER,255,255),_.setStencilWriteMask(0);const et=(performance.now()-U.lastOpacityUpdate)/1e3;xe.setUniform1f("u_time",et),U.glyphPerPageElementsMap.forEach((tt,nt)=>{this._renderGlyphRange(_,tt,nt,z,xe,W,ae,Ie)})}}_renderGlyphRange(e,f,c,x,_,v,T,z){x.bind(e,r.cw.LINEAR,c,y.CU),v&&(_.setUniform1f("u_halo",1),e.drawElements(r.MX.TRIANGLES,f[1],r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*f[0]),z.triangleCount+=f[1]/3),T&&(_.setUniform1f("u_halo",0),e.drawElements(r.MX.TRIANGLES,f[1],r.g.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*f[0]),z.triangleCount+=f[1]/3)}}}},18717:(pe,q,d)=>{d.d(q,{Z:()=>Y});var le=d(62208),b=d(62856),F=d(67969);class Y extends b.Z{dispose(){}prepareState(C){const{context:y}=C;y.setColorMask(!0,!0,!0,!0),y.setStencilFunction(F.wb.EQUAL,0,255)}draw(C,y){const{context:X}=C,{displayData:V}=y;if((0,le.Wi)(V)||("loaded"===V.state.name&&V.prepareForRendering(X),"attached"!==V.state.name))return;const ne=V.state.resources;X.setFaceCullingEnabled(!1),X.setBlendingEnabled(!0),X.setBlendFunctionSeparate(F.zi.ONE,F.zi.ONE_MINUS_SRC_ALPHA,F.zi.ONE,F.zi.ONE);const M=[];"ramp"===ne.values.lineColor.kind&&M.push("vvLineColor"),"ramp"===ne.values.lineOpacity.kind&&M.push("vvLineOpacity"),"ramp"===ne.values.lineRenderWidth.kind&&M.push("vvLineRenderWidth");const h=C.painter.materialManager.getProgram(C,{vsPath:"raster/flow",fsPath:"raster/flow",attributes:ne.locations},M);X.useProgram(h),h.setUniform1f("u_time",C.time/1e3),h.setUniform1f("u_fadeDuration",V.flowStyle.renderSettings.fadeDuration),h.setUniform1f("u_lineSpeed",V.flowStyle.renderSettings.lineSpeed),h.setUniformMatrix3fv("u_dvsMat3",y.transforms.dvs),h.setUniformMatrix3fv("u_displayViewMat3",C.state.displayViewMat3),k(h,"lineColor","vec4",V.flowStyle.renderSettings.lineColor),k(h,"lineOpacity","float",V.flowStyle.renderSettings.lineOpacity),k(h,"lineRenderWidth","float",V.flowStyle.renderSettings.lineRenderWidth),X.bindVAO(ne.vertexArray),X.drawElements(F.MX.TRIANGLES,ne.indexBuffer.size,F.g.UNSIGNED_INT,0),V.flowStyle.animated&&y.requestRender()}}function r(te,C,y,X){switch(C){case"int":te.setUniform1iv(y,X);break;case"float":te.setUniform1fv(y,X);break;case"vec2":te.setUniform2fv(y,X);break;case"vec3":te.setUniform3fv(y,X);break;case"vec4":te.setUniform4fv(y,X)}}function k(te,C,y,X){"constant"===X.kind?r(te,y,`u_${C}`,X.value):(r(te,"float",`u_${C}_stops`,X.stops),r(te,y,`u_${C}_values`,X.values),r(te,"int",`u_${C}_count`,[X.count]))}},15765:(pe,q,d)=>{d.d(q,{Z:()=>k});var le=d(62208),b=d(62856),F=d(67969);const Y=new Float32Array([.27058823529411763,.4588235294117647,.7098039215686275,1,.396078431372549,.5372549019607843,.7215686274509804,1,.5176470588235295,.6196078431372549,.7294117647058823,1,.6352941176470588,.7058823529411765,.7411764705882353,1,.7529411764705882,.8,.7450980392156863,1,.8705882352941177,.8901960784313725,.7490196078431373,1,1,1,.7490196078431373,1,1,.8627450980392157,.6313725490196078,1,.9803921568627451,.7254901960784313,.5176470588235295,1,.9607843137254902,.596078431372549,.4117647058823529,1,.9294117647058824,.4588235294117647,.3176470588235294,1,.9098039215686274,.08235294117647059,.08235294117647059,1]),r={beaufort_ft:Y,beaufort_m:Y,beaufort_km:Y,beaufort_mi:Y,beaufort_kn:new Float32Array([.1568627450980392,.5725490196078431,.7803921568627451,1,.34901960784313724,.6352941176470588,.7294117647058823,1,.5058823529411764,.7019607843137254,.6705882352941176,1,.6274509803921569,.7607843137254902,.6078431372549019,1,.7490196078431373,.8313725490196079,.5411764705882353,1,.8549019607843137,.9019607843137255,.4666666666666667,1,.9803921568627451,.9803921568627451,.39215686274509803,1,.9882352941176471,.8352941176470589,.3254901960784314,1,.9882352941176471,.7019607843137254,.4,1,.9803921568627451,.5529411764705883,.20392156862745098,1,.9686274509803922,.43137254901960786,.16470588235294117,1,.9411764705882353,.2784313725490196,.11372549019607843,1]),classified_arrow:new Float32Array([.2196078431372549,.6588235294117647,0,1,.5450980392156862,1.2117647058823529,0,1,1,1,0,1,1,.5019607843137255,0,1,1,0,0,1]),ocean_current_m:new Float32Array([.3058823529411765,.10196078431372549,.6,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),ocean_current_kn:new Float32Array([0,0,0,1,0,.1450980392156863,.39215686274509803,1,.3058823529411765,.10196078431372549,.6,1,.592156862745098,0,.39215686274509803,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.6941176470588235,.3058823529411765,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.7019607843137254,.20392156862745098,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),single_arrow:new Float32Array([0,92/255,230/255,1]),wind_speed:new Float32Array([0,0,0,1])};class k extends b.Z{constructor(){super(...arguments),this._desc={magdir:{vsPath:"raster/magdir",fsPath:"raster/magdir",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])},scalar:{vsPath:"raster/scalar",fsPath:"raster/scalar",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])}}}dispose(){}prepareState({context:C},y){C.setBlendingEnabled(!0),C.setBlendFunctionSeparate(F.zi.ONE,F.zi.ONE_MINUS_SRC_ALPHA,F.zi.ONE,F.zi.ONE_MINUS_SRC_ALPHA),C.setColorMask(!0,!0,!0,!0),C.setStencilWriteMask(0),C.setStencilTestEnabled(!0),C.setStencilOp(F.xS.KEEP,F.xS.KEEP,F.xS.REPLACE),C.setStencilFunction(F.wb.EQUAL,y.stencilRef,255)}draw(C,y){if((0,le.Wi)(y.source)||0===y.source.validPixelCount)return;const{timeline:X}=C;if(X.begin(this.name),y.updateVectorFieldVAO(C),"scalar"===C.renderPass){const V=y.vaoData.scalar;V&&this._drawScalars(C,y,V.vao,V.elementCount)}else{const V=y.vaoData.magdir;V&&this._drawTriangles(C,y,V.vao,V.elementCount)}X.end(this.name)}_drawTriangles(C,y,X,V){const{context:ne,painter:M}=C,{symbolizerParameters:h}=y,D=h.dataRange?["dataRange"]:[];"geographic"===h.rotationType&&D.push("rotationGeographic");const O=M.materialManager.getProgram(C,this._desc.magdir,D);ne.useProgram(O);const{coordScale:H,opacity:p,transforms:E}=y;O.setUniform2fv("u_coordScale",H),O.setUniform1f("u_opacity",p),O.setUniformMatrix3fv("u_dvsMat3",E.dvs);const{style:L,dataRange:R,rotation:Q,symbolPercentRange:me}=h;O.setUniform4fv("u_colors",r[L]||r.single_arrow),O.setUniform2fv("u_dataRange",R),O.setUniform1f("u_rotation",Q),O.setUniform2fv("u_symbolPercentRange",me);const oe=this._getSymbolSize(C,y);O.setUniform2fv("u_symbolSize",oe),ne.bindVAO(X),ne.drawElements(F.MX.TRIANGLES,V,F.g.UNSIGNED_INT,0)}_drawScalars(C,y,X,V){const{context:ne,painter:M}=C,{symbolizerParameters:h}=y,D=[];"wind_speed"===h.style?D.push("innerCircle"):h.dataRange&&D.push("dataRange"),"geographic"===h.rotationType&&D.push("rotationGeographic");const O=M.materialManager.getProgram(C,this._desc.scalar,D);ne.useProgram(O);const{coordScale:H,opacity:p,transforms:E}=y;O.setUniform2fv("u_coordScale",H),O.setUniform1f("u_opacity",p),O.setUniformMatrix3fv("u_dvsMat3",E.dvs);const{dataRange:L,symbolPercentRange:R}=h;O.setUniform2fv("u_dataRange",L),O.setUniform2fv("u_symbolPercentRange",R);const Q=this._getSymbolSize(C,y);O.setUniform2fv("u_symbolSize",Q),ne.bindVAO(X),ne.drawElements(F.MX.TRIANGLES,V,F.g.UNSIGNED_INT,0)}_getSymbolSize(C,y){const X=y.key?2**(C.displayLevel-y.key.level):y.resolution/C.state.resolution,{symbolTileSize:V}=y.symbolizerParameters;return[V/(Math.round((y.width-y.offset[0])/V)*V)/X,V/(Math.round((y.height-y.offset[1])/V)*V)/X]}}},9769:(pe,q,d)=>{d.d(q,{br:()=>X,qE:()=>ne});var le=d(62208),b=d(30217),F=d(49966),Y=d(9545),r=d(77692),k=d(57477),te=d(67969),C=d(38982);const y={bandCount:3,outMin:0,outMax:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class X extends k.s{constructor(h=null,D=null,O=null){super(),this._textureInvalidated=!0,this._colormapTextureInvalidated=!0,this._supportsBilinearTexture=!0,this.stencilRef=0,this.coordScale=[1,1],this._symbolizerParameters=null,this.height=null,this.isRendereredSource=!1,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this.rawPixelData=null,this._suspended=!1,this._bandIds=null,this._interpolation=null,this._transformGrid=null,this.width=null,this.x=0,this.y=0,this.source=h,this.transformGrid=D,this.interpolation=O}destroy(){const h=this.getTextures();null==h||h.textures.forEach(D=>D.dispose()),this._rasterTexture=null,this._transformGridTexture=null,this._colormapTexture=null}get symbolizerParameters(){return this._symbolizerParameters||y}set symbolizerParameters(h){this._symbolizerParameters!==h&&(this._symbolizerParameters=h,this._colormapTextureInvalidated=!0)}get source(){return this._source}set source(h){this._source!==h&&(this._source=h,this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null),this.invalidateTexture())}get suspended(){return this._suspended}set suspended(h){this._suspended&&!h&&this.stage&&(this.ready(),this.requestRender()),this._suspended=h}get bandIds(){return this._bandIds}set bandIds(h){this._bandIds=h,this._isBandIdschanged(h)&&this.invalidateTexture()}get interpolation(){return this._interpolation||"nearest"}set interpolation(h){this._interpolation=h,this._rasterTexture&&this._rasterTexture.setSamplingMode("bilinear"===this._getTextureSamplingMethod(h)?te.cw.LINEAR:te.cw.NEAREST)}get transformGrid(){return this._transformGrid}set transformGrid(h){this._transformGrid=h,this._transformGridTexture&&(this._transformGridTexture.dispose(),this._transformGridTexture=null)}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this.requestRender())}_createTransforms(){return{dvs:(0,F.c)()}}setTransform(h){const D=(0,b.b)(this.transforms.dvs),[O,H]=h.toScreenNoRotation([0,0],[this.x,this.y]),p=this.resolution/this.pixelRatio/h.resolution,E=p*this.width,L=p*this.height,R=Math.PI*this.rotation/180;(0,b.c)(D,D,(0,Y.f)(O,H)),(0,b.c)(D,D,(0,Y.f)(E/2,L/2)),(0,b.r)(D,D,-R),(0,b.c)(D,D,(0,Y.f)(-E/2,-L/2)),(0,b.j)(D,D,(0,Y.f)(E,L)),(0,b.m)(this.transforms.dvs,h.displayViewMat3,D)}getTextures(){if(!this._rasterTexture)return null;const h=[],D=[];return this._transformGridTexture&&(D.push(this._transformGridTexture),h.push("u_transformGrid")),this._rasterTexture&&(D.push(this._rasterTexture),h.push("u_image")),this._colormapTexture&&(D.push(this._colormapTexture),h.push("u_colormap")),{names:h,textures:D}}onAttach(){this.invalidateTexture()}onDetach(){this.invalidateTexture()}updateTexture({context:h}){var D,O,H;if(!this.stage)return null==(D=this._rasterTexture)||D.dispose(),null==(O=this._transformGridTexture)||O.dispose(),null==(H=this._colormapTexture)||H.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null,this._transformGridTexture=null,void(this._colormapTexture=null);const p=this._isValidSource(this.source);p&&this._colormapTextureInvalidated&&(this._colormapTextureInvalidated=!1,this._updateColormapTexture(h)),this._textureInvalidated&&(this._textureInvalidated=!1,this._createOrDestroyRasterTexture(h),this._rasterTexture&&(p?this.transformGrid&&!this._transformGridTexture&&(this._transformGridTexture=(0,C.Br)(h,this.transformGrid)):this._rasterTexture.setData(null)),this.suspended||(this.ready(),this.requestRender()))}_createOrDestroyRasterTexture(h){var D,O;const H=(0,le.pC)(this.source)?(0,r.qF)(this.source,this.bandIds):null;if(!this._isValidSource(H))return void(this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null));const p=!this._isBandIdschanged(this.bandIds);if(this._rasterTexture){if(p)return;this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null}this._supportsBilinearTexture=null==(D=h.capabilities.textureFloat)?void 0:D.textureFloatLinear;const E=this._getTextureSamplingMethod(this.interpolation),L=this.isRendereredSource||!(null!=(O=h.capabilities.textureFloat)&&O.textureFloat);this._rasterTexture=(0,C.s9)(h,H,E,L),this._rasterTextureBandIds=this.bandIds?[...this.bandIds]:null}_isBandIdschanged(h){const D=this._rasterTextureBandIds;return!(null==D&&null==h||D&&h&&D.join("")===h.join(""))}_isValidSource(h){var D;return(0,le.pC)(h)&&(null==(D=h.pixels)?void 0:D.length)>0}_getTextureSamplingMethod(h){const{type:D,colormap:O}=this.symbolizerParameters,H="lut"===D||"stretch"===D&&(0,le.pC)(O);return!this._supportsBilinearTexture||H||"bilinear"!==h&&"cubic"!==h?"nearest":"bilinear"}_updateColormapTexture(h){const D=this._colormap,O=this.symbolizerParameters.colormap;return O?D?O.length!==D.length||O.some((H,p)=>H!==D[p])?(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),this._colormapTexture=(0,C.iC)(h,O),void(this._colormap=O)):void 0:(this._colormapTexture=(0,C.iC)(h,O),void(this._colormap=O)):(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),void(this._colormap=null))}}function ne(M){return(0,le.pC)(M.source)}},93292:(pe,q,d)=>{d.d(q,{sy:()=>F,cD:()=>r,As:()=>Y});var le=d(67969),b=d(40852);const F={geometry:[new b.G("a_pos",2,le.g.BYTE,0,2)]},Y={geometry:[new b.G("a_pos",2,le.g.BYTE,0,4),new b.G("a_tex",2,le.g.BYTE,2,4)]},r={geometry:[new b.G("a_pos",2,le.g.UNSIGNED_SHORT,0,4)]}},50392:(pe,q,d)=>{d.d(q,{Z:()=>r});var le=d(83994),b=d(67969),F=d(49353),Y=d(40852);class r{constructor(te,C){this.rctx=te,this._vertexBuffer=le.f.createVertex(te,b.l1.STATIC_DRAW,new Uint16Array(C)),this._vao=new F.U(te,new Map([["a_position",0]]),{geometry:[new Y.G("a_position",2,b.g.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=C.length/2}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(b.MX.TRIANGLE_STRIP,0,this._count)}}},44589:(pe,q,d)=>{d.d(q,{Z:()=>Ce}),d(8314);var b=d(62208),F=d(49966),Y=d(77598),r=d(1011),k=d(26584),te=d(63290),C=d(57477),y=d(11915),X=d(67831),V=d(99770),ne=d(82054),M=d(88071),h=d(5254),D=d(83994),O=d(67969);const H=te.Z.getLogger("esri.views.2d.engine.webgl.Mesh2D"),E=(ve,g,S,K)=>{let Z=0;for(let ie=1;ie<S;ie++)Z+=(ve[2*(g+ie)]-ve[2*(g+ie-1)])*(ve[2*(g+ie)+1]+ve[2*(g+ie-1)+1]);return K?Z>0:Z<0},L=({coords:ve,lengths:g},S)=>{const K=[];for(let Z=0,ie=0;Z<g.length;ie+=g[Z],Z+=1){const ce=ie,ge=[];for(;Z<g.length-1&&E(ve,ie+g[Z],g[Z+1],S);Z+=1,ie+=g[Z])ge.push(ie+g[Z]-ce);const Se=ve.slice(2*ce,2*(ie+g[Z])),Ee=(0,y.e)(Se,ge,2);for(const Oe of Ee)K.push(Oe+ce)}return K};class R{constructor(g,S,K,Z=!1){this._cache={},this.vertices=g,this.indices=S,this.primitiveType=K,this.isMapSpace=Z}static fromRect({x:g,y:S,width:K,height:Z}){return R.fromScreenExtent({xmin:g,ymin:S,xmax:g+K,ymax:S+Z})}static fromPath(g){const S=(0,ne.ks)(new M.Z,g.path,!1,!1),K=S.coords,Z=new Uint32Array(L(S,!0)),ie=new Uint32Array(K.length/2);for(let ce=0;ce<ie.length;ce++)ie[ce]=(0,h.UJ)(Math.floor(K[2*ce]),Math.floor(K[2*ce+1]));return new R({geometry:ie},Z,O.MX.TRIANGLES)}static fromGeometry(g,S){const K=S.geometry.type;switch(K){case"polygon":return R.fromPolygon(g,S.geometry);case"extent":return R.fromMapExtent(g,S.geometry);default:return H.error(new k.Z("mapview-bad-type",`Unable to create a mesh from type ${K}`,S)),R.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(g,S){const K=(0,ne.Uy)(new M.Z,S,!1,!1),Z=K.coords,ie=new Uint32Array(L(K,!1)),ce=new Uint32Array(Z.length/2),ge=(0,V.a)(),Se=(0,V.a)();for(let Ee=0;Ee<ce.length;Ee++)(0,X.s)(ge,Z[2*Ee],Z[2*Ee+1]),g.toScreen(Se,ge),ce[Ee]=(0,h.UJ)(Math.floor(Se[0]),Math.floor(Se[1]));return new R({geometry:ce},ie,O.MX.TRIANGLES,!0)}static fromScreenExtent({xmin:g,xmax:S,ymin:K,ymax:Z}){const ie={geometry:new Uint32Array([(0,h.UJ)(g,K),(0,h.UJ)(S,K),(0,h.UJ)(g,Z),(0,h.UJ)(g,Z),(0,h.UJ)(S,K),(0,h.UJ)(S,Z)])},ce=new Uint32Array([0,1,2,3,4,5]);return new R(ie,ce,O.MX.TRIANGLES)}static fromMapExtent(g,S){const[K,Z]=g.toScreen([0,0],[S.xmin,S.ymin]),[ie,ce]=g.toScreen([0,0],[S.xmax,S.ymax]),ge={geometry:new Uint32Array([(0,h.UJ)(K,Z),(0,h.UJ)(ie,Z),(0,h.UJ)(K,ce),(0,h.UJ)(K,ce),(0,h.UJ)(ie,Z),(0,h.UJ)(ie,ce)])},Se=new Uint32Array([0,1,2,3,4,5]);return new R(ge,Se,O.MX.TRIANGLES)}destroy(){(0,b.pC)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const g in this._cache.vertexBuffers)(0,b.pC)(this._cache.vertexBuffers[g])&&this._cache.vertexBuffers[g].dispose()}get elementType(){return(ve=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return O.g.UNSIGNED_BYTE;case 2:return O.g.UNSIGNED_SHORT;case 4:return O.g.UNSIGNED_INT;default:throw new k.Z("Cannot get DataType of array")}})()}getIndexBuffer(g,S=O.l1.STATIC_DRAW){return this._cache.indexBuffer||(this._cache.indexBuffer=D.f.createIndex(g,S,this.indices)),this._cache.indexBuffer}getVertexBuffers(g,S=O.l1.STATIC_DRAW){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((K,Z)=>we(Ne({},K),{[Z]:D.f.createVertex(g,S,this.vertices[Z])}),{})),this._cache.vertexBuffers}}var Q=d(49353);const me=te.Z.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),oe=ve=>parseFloat(ve)/100;class Te extends C.s{constructor(g,S){super(),this._clip=S,this._cache={},this.stage=g,this._handle=S.watch("version",()=>this._invalidate()),this.ready()}static fromClipArea(g,S){return new Te(g,S)}_destroyGL(){(0,b.pC)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),(0,b.pC)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(g,S,K,Z){const[ie,ce]=S.size;if("geometry"!==this._clip.type&&this._lastWidth===ie&&this._lastHeight===ce||(this._lastWidth=ie,this._lastHeight=ce,this._destroyGL()),(0,b.Wi)(this._cache.vao)){const ge=this._createMesh(S,this._clip),Se=ge.getIndexBuffer(g),Ee=ge.getVertexBuffers(g);this._cache.mesh=ge,this._cache.vao=new Q.U(g,K,Z,Ee,Se)}return this._cache.vao}_createTransforms(){return{dvs:(0,F.c)()}}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(g,S){const[K,Z]=g.size,ie="string"==typeof S.left?oe(S.left)*K:S.left,ce="string"==typeof S.right?oe(S.right)*K:S.right,ge="string"==typeof S.top?oe(S.top)*Z:S.top,Se="string"==typeof S.bottom?oe(S.bottom)*Z:S.bottom,Oe=ge;return{x:ie,y:Oe,width:Math.max(K-ce-ie,0),height:Math.max(Z-Se-Oe,0)}}_createMesh(g,S){switch(S.type){case"rect":return R.fromRect(this._createScreenRect(g,S));case"path":return R.fromPath(S);case"geometry":return R.fromGeometry(g,S);default:return me.error(new k.Z("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),R.fromRect({x:0,y:0,width:1,height:1})}}}var be=d(39406);class Ce extends r.W{constructor(){super(...arguments),this.name=this.constructor.name}set clips(g){this._clips=g,this.children.forEach(S=>S.clips=g),this._updateClippingInfo()}_createTransforms(){return{dvs:(0,F.c)()}}doRender(g){const S=this.createRenderParams(g),{painter:K,globalOpacity:Z,profiler:ie,drawPhase:ce}=S,ge=ce===be.jx.LABEL||ce===be.jx.HIGHLIGHT?1:Z*this.computedOpacity;ie.recordContainerStart(this.name),K.beforeRenderLayer(S,this._clippingInfos?255:0,ge),this.updateTransforms(g.state),this.renderChildren(S),K.compositeLayer(S,ge),ie.recordContainerEnd()}renderChildren(g){(0,b.Wi)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(g.painter));for(const S of this.children)S.beforeRender(g);for(const S of this._renderPasses)try{S.render(g)}catch(K){}for(const S of this.children)S.afterRender(g)}createRenderParams(g){return g.requireFBO=this.requiresDedicatedFBO,g}prepareRenderPasses(g){return[g.registerRenderPass({name:"clip",brushes:[Y.U.clip],target:()=>this._clippingInfos,drawPhase:be.jx.MAP|be.jx.LABEL|be.jx.LABEL_ALPHA|be.jx.DEBUG|be.jx.HIGHLIGHT})]}updateTransforms(g){for(const S of this.children)S.setTransform(g)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if((0,b.pC)(this._clippingInfos)&&(this._clippingInfos.forEach(S=>S.destroy()),this._clippingInfos=null),!this.stage)return;const g=this._clips;(0,b.pC)(g)&&g.length&&(this._clippingInfos=g.items.map(S=>Te.fromClipArea(this.stage,S))),this.requestRender()}}},62856:(pe,q,d)=>{d.d(q,{Z:()=>le});class le{constructor(){this.name=this.constructor.name||"UnnamedBrush"}prepareState(F,Y,r){}draw(F,Y,r){}drawMany(F,Y,r){for(const k of Y)this.draw(F,k,r)}}},29384:(pe,q,d)=>{d.d(q,{Z:()=>h});var le=d(67709),b=d(93292),F=d(62856),Y=d(11176),r=d(37977);const k={shaders:{vertexShader:(0,r.w)("tileInfo/tileInfo.vert"),fragmentShader:(0,r.w)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])};var te=d(83994),C=d(67969),y=d(94299),X=d(55086),V=d(49353);class h extends F.Z{constructor(){super(...arguments),this._color=(0,le.f)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:O}){O.setBlendingEnabled(!0),O.setBlendFunctionSeparate(C.zi.ONE,C.zi.ONE_MINUS_SRC_ALPHA,C.zi.ONE,C.zi.ONE_MINUS_SRC_ALPHA),O.setColorMask(!0,!0,!0,!0),O.setStencilWriteMask(0),O.setStencilTestEnabled(!1)}draw(O,H){const{context:p}=O;if(!H.isReady)return;this._loadWGLResources(p),p.bindVAO(this._outlineVertexArrayObject),p.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",H.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",H.rangeX,H.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),p.drawArrays(C.MX.LINE_STRIP,0,4);const E=this._getTexture(p,H);E&&(p.bindVAO(this._tileInfoVertexArrayObject),p.useProgram(this._tileInfoProgram),p.bindTexture(E,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",H.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",H.rangeX/H.width,H.rangeY/H.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",E.descriptor.width,E.descriptor.height),p.drawArrays(C.MX.TRIANGLE_STRIP,0,4)),p.bindVAO()}_loadWGLResources(O){if(this._outlineProgram&&this._tileInfoProgram)return;const H=(0,y.H)(O,Y.O),p=(0,y.H)(O,k),E=new Int8Array([0,0,1,0,1,1,0,1]),L=te.f.createVertex(O,C.l1.STATIC_DRAW,E),R=new V.U(O,Y.O.attributes,b.sy,{geometry:L}),Q=new Int8Array([0,0,1,0,0,1,1,1]),me=te.f.createVertex(O,C.l1.STATIC_DRAW,Q),oe=new V.U(O,k.attributes,b.sy,{geometry:me});this._outlineProgram=H,this._tileInfoProgram=p,this._outlineVertexArrayObject=R,this._tileInfoVertexArrayObject=oe}_getTexture(O,H){if(H.texture&&H.triangleCountReportedInDebug===H.triangleCount)return H.texture;H.triangleCountReportedInDebug=H.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const p=H.triangleCount;let E=H.key.id;H.triangleCount>0&&(E+=`, ${p}`);const L=this._canvas,R=L.getContext("2d");return R.font="24px sans-serif",R.textAlign="left",R.textBaseline="top",R.clearRect(0,0,300,32),p>1e5?(R.fillStyle="red",R.fillRect(0,0,300,32),R.fillStyle="black"):(R.clearRect(0,0,300,32),R.fillStyle="blue"),R.fillText(E,0,0),H.texture=new X.x(O,{target:C.No.TEXTURE_2D,pixelFormat:C.VI.RGBA,dataType:C.Br.UNSIGNED_BYTE,samplingMode:C.cw.NEAREST,wrapMode:C.e8.CLAMP_TO_EDGE},L),H.texture}}},13382:(pe,q,d)=>{d.d(q,{Z:()=>y});var le=d(67709),b=d(93292),F=d(62856),Y=d(11176),r=d(83994),k=d(67969),te=d(94299),C=d(49353);class y extends F.Z{constructor(){super(...arguments),this._color=(0,le.f)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:V},ne){V.setDepthWriteEnabled(!1),V.setDepthTestEnabled(!1),V.setStencilTestEnabled(!0),V.setBlendingEnabled(!1),V.setColorMask(!1,!1,!1,!1),V.setStencilOp(k.xS.KEEP,k.xS.KEEP,k.xS.REPLACE),V.setStencilWriteMask(255),V.setStencilFunctionSeparate(k.LR.FRONT_AND_BACK,k.wb.GREATER,ne.stencilRef,255)}draw(V,ne){const{context:M}=V;this._initialized||this._initialize(M),M.bindVAO(this._solidVertexArrayObject),M.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",ne.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[ne.rangeX,ne.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),M.drawArrays(k.MX.TRIANGLE_STRIP,0,4),M.bindVAO()}_initialize(V){if(this._initialized)return!0;const ne=(0,te.H)(V,Y.O);if(!ne)return!1;const M=new Int8Array([0,0,1,0,0,1,1,1]),h=r.f.createVertex(V,k.l1.STATIC_DRAW,M),D=new C.U(V,Y.O.attributes,b.sy,{geometry:h});return this._solidProgram=ne,this._solidVertexArrayObject=D,this._initialized=!0,!0}}},11176:(pe,q,d)=>{d.d(q,{O:()=>b});var le=d(37977);const b={shaders:{vertexShader:(0,le.w)("background/background.vert"),fragmentShader:(0,le.w)("background/background.frag")},attributes:new Map([["a_pos",0]])}},37977:(pe,q,d)=>{d.d(q,{w:()=>r});const le={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(vividLight(Cb.r, Cs.r),\nvividLight(Cb.g, Cs.g),\nvividLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 2.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}"}},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(u_attributeTextureSize));\n}\nhighp vec4 getAttributeData0(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.0000001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef OUTLINED_FILL\nvarying lowp float v_isOutline;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = vec4(1.0, 0.0, 0.0, 0.0);\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nout_color = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef OUTLINED_FILL\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SIMPLE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef OUTLINED_FILL\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_color   = outputs.color;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nv_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nout_color = v_color;\n#ifdef DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nvec2 scale = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_scale;\nfloat width = u_pixelRatio * u_zoomFactor * a_width * scale.x;\nfloat height = u_pixelRatio * u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\n0,            0,             1);\nvec2 tileOffset = vec2(u_tileOffset.x * cosA - u_tileOffset.y * sinA, u_tileOffset.x * sinA + u_tileOffset.y * cosA);\ntileOffset = mod(tileOffset, vec2(a_aux2.x, a_aux2.y));\nvec2 symbolOffset = (a_offset - tileOffset - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef OUTLINED_FILL\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\ngl_Position = vec4(0., 0., 2., 0.);\nreturn;\n}\n#endif\nout_pos = hittestFill();\ngl_PointSize = 1.0;\n}\n#elif defined(OUTLINED_FILL)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nlowp vec4 color = vec4(0.);\nhighp vec3 pos  = vec3(0.);\ndraw(color, pos);\ngl_Position = vec4(clip(color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nbool hasSameSide(vec3 p0, vec3 p1, vec3 a, vec3 b) {\nvec3 cp0 = cross(b - a, p0 - a);\nvec3 cp1 = cross(b - a, p1 - a);\nreturn dot(cp0, cp1) >= 0.;\n}\nbool intersectPointTriangle(vec3 p, vec3 a, vec3 b, vec3 c) {\nreturn hasSameSide(p, a, b, c) && hasSameSide(p, b, a, c) && hasSameSide(p, c, a, b);\n}\nbool intersectCircleTriange(vec3 p, vec3 a, vec3 b, vec3 c, float radius) {\nvec2 ba = b.xy - a.xy;\nvec2 ca = c.xy - a.xy;\nbool isParallel = ba.x * ca.y - ca.x * ba.y == 0.;\nif (isParallel) {\nreturn false;\n}\nif (distance(p, a) <= radius) {\nreturn true;\n}\nif (distance(p, b) <= radius) {\nreturn true;\n}\nif (distance(p, c) <= radius) {\nreturn true;\n}\nvec3 p0 = p - normalize(p - a) * radius;\nif (intersectPointTriangle(p0, a, b, c)) {\nreturn true;\n}\nvec3 p1 = p - normalize(p - b) * radius;\nif (intersectPointTriangle(p1, a, b, c)) {\nreturn true;\n}\nvec3 p2 = p - normalize(p - c) * radius;\nreturn intersectPointTriangle(p2, a, b, c);\n}\nvec3 hittestFill() {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nif (!intersectCircleTriange(hittestPos, pos, pos1, pos2, hittestDist)) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif"},hittest:{"common.glsl":"#ifdef HITTEST\nuniform float u_hittestDist;\nuniform highp vec2 u_hittestPos;\n#endif"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nvec3 hittestMarker(vec2 size) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat maxHalfSize = max(size.x, size.y) / 2.;\nif (distance(pos, hittestPos) - maxHalfSize > hittestDist) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn vec4(1.);\n}\n#elif defined(SDF)\nvec4 getColor() {\nvec2 v_size = v_sizeTex.xy;\nvec2 v_tex  = v_sizeTex.zw;\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor() {\nvec2 v_tex  = v_sizeTex.zw;\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = getSize(outSize.y) / referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = getRotation() * vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nvec2 v_tex      = a_texCoords / u_mosaicSize;\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_filters  = getFilterFlags();\nv_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\nv_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\n#ifdef HITTEST\nvec3 pos = hittestMarker(v_size.xy);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, v_filters, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, v_filters, a_zoomRange), 1.0);\n#endif\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nv_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\ngl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nbool intersectCircleLineInner(vec3 p, vec3 a, vec3 b, float radius) {\nvec3 v0 = a - p;\nvec3 b2 = b - p;\nvec3 v  = b2 - v0;\nfloat D = 4. * dot(v0, v) * dot(v0, v) - 4. * dot(v, v) * ( dot(v0, v0) - radius * radius );\nif (D < 0.) {\nreturn false;\n}\nfloat sqrtD = sqrt(D);\nfloat t0 = (-2. * dot(v0, v) + sqrtD) / (2. * dot(v, v));\nfloat t1 = (-2. * dot(v0, v) - sqrtD) / (2. * dot(v, v));\nreturn ((t0 >= 0. && t0 <= 1.) || (t1 >= 0. && t1 <= 1.));\n}\nbool intersectCircleLine(vec3 p, vec3 a, vec3 b, vec3 c, float radius) {\nreturn intersectCircleLineInner(p, a, b, radius) || intersectCircleLineInner(p, b, c, radius);\n}\nvec3 hittestLine(float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nif (!intersectCircleLine(hittestPos, pos, pos1, pos2, hittestDist + halfWidth)) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = vec4(1.);\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\ngl_PointSize = 1.;\ngl_Position = vec4(hittestLine(halfWidth), 1.);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},shared:{line:{"common.glsl":"#if !defined(OUTLINED_FILL) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(OUTLINED_FILL) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(OUTLINED_FILL)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * lineHalfWidth / line.patternSize.y;\nmediump float relativeTexX = fract(u_pixelRatio * line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexY, relativeTexX));\nlowp vec4 color = texture2D(u_texture, texCoord);\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat lineWidth = 2.0 * lineHalfWidth;\nreturn 0.5 * (lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef OUTLINED_FILL\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, 0);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef OUTLINED_FILL\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nvec3 hittestGlyph(in vec3 in_pos, in vec3 offset, in float fontSize) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * in_pos + u_tileMat3 * offset;\nvec3  hittestPos = vec3(u_hittestPos, 1.);\nfloat hittestDist = u_hittestDist;\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat halfFontSize = fontSize / 2.;\nif (distance(pos, hittestPos) > hittestDist + halfFontSize) {\noutTextureCoords.z += 2.0;\n}\nreturn outTextureCoords;\n}\n#endif","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn vec4(1.);\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(baseSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nv_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nv_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nvec3 pos = hittestGlyph(in_pos, offset, fontSize);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp mat3 u_tileMat3;\nuniform highp mat3 u_viewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifndef OUTSIDE_LABELS_VISIBLE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#endif\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\ngl_FragColor = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\ngl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\nfloat alpha = u_opacity * color.a;\ngl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"flow.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_lineColor;\nvarying float v_lineRenderWidth;\nuniform float u_time;\nuniform float u_fadeDuration;\nuniform float u_lineSpeed;\nvoid main(void) {\nvec4 color = v_lineColor;\nfloat edgeWidth = min(2.0 * v_lineRenderWidth - 1.0, 1.0);\nfloat edgeStart = (v_lineRenderWidth - edgeWidth) / v_lineRenderWidth;\nif (edgeStart < 0.95) {\nfloat s = step(edgeStart, abs(v_side));\ncolor.a *= (1.0 - s) + s * (1.0 - (abs(v_side) - edgeStart) / (1.0 - edgeStart));\n}\nfloat t = mod(v_timeSeed * (v_totalTime + u_fadeDuration) + u_time * u_lineSpeed, v_totalTime + u_fadeDuration) - v_time;\ncolor.a *= step(0.0, t) * exp(-2.3 * t / u_fadeDuration);\ncolor.rgb *= color.a;\ngl_FragColor = color;\n}","flow.vert":"precision highp float;\nattribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_lineColor;\nvarying float v_lineRenderWidth;\n#define MAX_STOPS 8\n#ifdef VV_LINE_COLOR\nuniform float u_lineColor_stops[MAX_STOPS];\nuniform vec4 u_lineColor_values[MAX_STOPS];\nuniform int u_lineColor_count;\n#else\nuniform vec4 u_lineColor;\n#endif\n#ifdef VV_LINE_OPACITY\nuniform float u_lineOpacity_stops[MAX_STOPS];\nuniform float u_lineOpacity_values[MAX_STOPS];\nuniform int u_lineOpacity_count;\n#else\nuniform float u_lineOpacity;\n#endif\n#ifdef VV_LINE_RENDER_WIDTH\nuniform float u_lineRenderWidth_stops[MAX_STOPS];\nuniform float u_lineRenderWidth_values[MAX_STOPS];\nuniform int u_lineRenderWidth_count;\n#else\nuniform float u_lineRenderWidth;\n#endif\nvoid main(void) {\nfloat x = a_speed;\n#ifdef VV_LINE_COLOR\nvec4 lineColor = u_lineColor_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineColor_count) {\nbreak;\n}\nfloat x1 = u_lineColor_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineColor_stops[i];\nvec4 y2 = u_lineColor_values[i];\nif (x < x2) {\nvec4 y1 = u_lineColor_values[i - 1];\nlineColor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineColor = y2;\n}\n}\n}\n#else\nvec4 lineColor = u_lineColor;\n#endif\n#ifdef VV_LINE_OPACITY\nfloat lineOpacity = u_lineOpacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineOpacity_count) {\nbreak;\n}\nfloat x1 = u_lineOpacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineOpacity_stops[i];\nfloat y2 = u_lineOpacity_values[i];\nif (x < x2) {\nfloat y1 = u_lineOpacity_values[i - 1];\nlineOpacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineOpacity = y2;\n}\n}\n}\n#else\nfloat lineOpacity = u_lineOpacity;\n#endif\n#ifdef VV_LINE_RENDER_WIDTH\nfloat lineRenderWidth = u_lineRenderWidth_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_lineRenderWidth_count) {\nbreak;\n}\nfloat x1 = u_lineRenderWidth_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_lineRenderWidth_stops[i];\nfloat y2 = u_lineRenderWidth_values[i];\nif (x < x2) {\nfloat y1 = u_lineRenderWidth_values[i - 1];\nlineRenderWidth = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nlineRenderWidth = y2;\n}\n}\n}\n#else\nfloat lineRenderWidth = u_lineRenderWidth;\n#endif\nvec2 position = a_positionAndSide.xy;\nfloat side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineRenderWidth, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_side = side;\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_lineColor = vec4(lineColor.rgb, lineColor.a * lineOpacity);\nv_lineRenderWidth = lineRenderWidth;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\nif (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\nreturn 0.0;\n}\nelse {\nreturn e;\n}\n}\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec2 axy = vec2(-1.0, -1.0);\nvec2 bxy = vec2(0.0, -1.0);\nvec2 cxy = vec2(1.0, -1.0);\nvec2 dxy = vec2(-1.0, 0.0);\nvec2 fxy = vec2(1.0, 0.0);\nvec2 gxy = vec2(-1.0, 1.0);\nvec2 hxy = vec2(0.0, 1.0);\nvec2 ixy = vec2(1.0, 1.0);\nvec2 onePixel = 1.0 / u_srcImageSize;\nif (pixelLocation.s < onePixel.s) {\naxy[0] = 1.0;\ndxy[0] = 1.0;\ngxy[0] = 1.0;\n}\nif (pixelLocation.t < onePixel.t) {\naxy[1] = 1.0;\nbxy[1] = 1.0;\ncxy[1] = 1.0;\n}\nif (pixelLocation.s > 1.0 - onePixel.s) {\ncxy[0] = -1.0;\nfxy[0] = -1.0;\nixy[0] = -1.0;\n}\nif (pixelLocation.t > 1.0 - onePixel.t) {\ngxy[1] = -1.0;\nhxy[1] = -1.0;\nixy[1] = -1.0;\n}\nvec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\nvec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\nvec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\nvec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\nvec4 ve = texture2D(u_image, pixelLocation);\nvec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\nvec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\nvec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\nvec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\nfloat dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\nfloat dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\nfloat alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\ngl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}},Y=new(d(7423).B)(function F(k){let te=le;return k.split("/").forEach(C=>{te&&(te=te[C])}),te});function r(k){return Y.resolveIncludes(k)}},38982:(pe,q,d)=>{d.d(q,{iC:()=>C,s9:()=>r,Br:()=>te,zS:()=>V,Ue:()=>X,Tc:()=>y,Fm:()=>M,xW:()=>ne,v:()=>h,RA:()=>O,N9:()=>D});var le=d(57596),b=d(67969),Y=(d(85775),d(55086));function r(p,E,L="nearest",R=!1){var Q;const me=!(R&&"u8"===E.pixelType),oe=me?b.Br.FLOAT:b.Br.UNSIGNED_BYTE,Te=null==E.pixels||0===E.pixels.length?null:me?E.getAsRGBAFloat():E.getAsRGBA(),be=null==(Q=p.capabilities.textureFloat)?void 0:Q.textureFloatLinear;return new Y.x(p,{width:E.width,height:E.height,target:b.No.TEXTURE_2D,pixelFormat:b.VI.RGBA,internalFormat:p.type===le.zO.WEBGL2&&me?b.lP.RGBA32F:b.VI.RGBA,samplingMode:!be||"bilinear"!==L&&"cubic"!==L?b.cw.NEAREST:b.cw.LINEAR,dataType:oe,wrapMode:b.e8.CLAMP_TO_EDGE,flipped:!1},Te)}function te(p,E){const{spacing:L,offsets:R,coefficients:Q,size:[me,oe]}=E,Te=L[0]>1,be={width:Te?4*me:me,height:oe,target:b.No.TEXTURE_2D,pixelFormat:b.VI.RGBA,internalFormat:p.type===le.zO.WEBGL2?b.lP.RGBA32F:b.VI.RGBA,dataType:b.Br.FLOAT,samplingMode:b.cw.NEAREST,wrapMode:b.e8.CLAMP_TO_EDGE,flipped:!1},Ce=new Float32Array(Te?me*oe*16:2*R.length);if(Te)for(let ve=0,g=0;ve<Q.length;ve++)Ce[g++]=Q[ve],ve%3==2&&(Ce[g++]=1);else for(let ve=0;ve<oe;ve++)for(let g=0;g<me;g++){const S=4*(ve*me+g),K=2*(g*oe+ve);Ce[S]=R[K],Ce[S+1]=R[K+1],Ce[S+3]=-1===R[K]?0:1}return new Y.x(p,be,Ce)}function C(p,E){return new Y.x(p,{width:E.length/4,height:1,target:b.No.TEXTURE_2D,pixelFormat:b.VI.RGBA,internalFormat:b.VI.RGBA,dataType:b.Br.UNSIGNED_BYTE,samplingMode:b.cw.NEAREST,wrapMode:b.e8.CLAMP_TO_EDGE,flipped:!1},E)}function y(p,E,L,R=1,Q=!0,me=!1){return{u_flipY:Q,u_isFloatTexture:me,u_applyTransform:!!p,u_opacity:R,u_transformSpacing:p?p.spacing:null,u_transformGridSize:p?p.size:null,u_targetImageSize:E,u_srcImageSize:L}}function X(p,E){return{u_colormapOffset:E||0,u_colormapMaxIndex:p?p.length/4-1:null}}function V(p,E){return{u_scale:p,u_offset:E}}function ne(p){return{u_bandCount:p.bandCount,u_minOutput:p.outMin,u_maxOutput:p.outMax,u_minCutOff:p.minCutOff,u_maxCutOff:p.maxCutOff,u_factor:p.factor,u_useGamma:p.useGamma,u_gamma:p.gamma,u_gammaCorrection:p.gammaCorrection}}function M(p){return{u_hillshadeType:p.hillshadeType,u_sinZcosAs:p.sinZcosAs,u_sinZsinAs:p.sinZsinAs,u_cosZs:p.cosZs,u_weights:p.weights,u_factor:p.factor,u_minValue:p.minValue,u_maxValue:p.maxValue}}function h(p,E){const L=p.gl,R=E.glName,Q=L.getProgramParameter(R,L.ACTIVE_UNIFORMS),me=new Map;let oe;for(let Te=0;Te<Q;Te++)oe=L.getActiveUniform(R,Te),oe&&me.set(oe.name,{location:L.getUniformLocation(R,oe.name),info:oe});return me}function D(p,E,L){Object.keys(L).forEach(R=>{const Q=E.get(R)||E.get(R+"[0]");Q&&function H(p,E,L,R){if(null===R||null==L)return!1;const{info:Q}=R;switch(Q.type){case b.Se.FLOAT:Q.size>1?p.setUniform1fv(E,L):p.setUniform1f(E,L);break;case b.Se.FLOAT_VEC2:p.setUniform2fv(E,L);break;case b.Se.FLOAT_VEC3:p.setUniform3fv(E,L);break;case b.Se.FLOAT_VEC4:p.setUniform4fv(E,L);break;case b.Se.FLOAT_MAT3:p.setUniformMatrix3fv(E,L);break;case b.Se.FLOAT_MAT4:p.setUniformMatrix4fv(E,L);break;case b.Se.INT:Q.size>1?p.setUniform1iv(E,L):p.setUniform1i(E,L);break;case b.Se.BOOL:p.setUniform1i(E,L?1:0);break;case b.Se.INT_VEC2:case b.Se.BOOL_VEC2:p.setUniform2iv(E,L);break;case b.Se.INT_VEC3:case b.Se.BOOL_VEC3:p.setUniform3iv(E,L);break;case b.Se.INT_VEC4:case b.Se.BOOL_VEC4:p.setUniform4iv(E,L);break;default:return!1}}(p,R,L[R],Q)})}function O(p,E,L,R){L.length===R.length&&(R.some(Q=>null==Q)||L.some(Q=>null==Q)||L.forEach((Q,me)=>{E.setUniform1i(Q,me),p.bindTexture(R[me],me)}))}}}]);